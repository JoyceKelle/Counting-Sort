da importação aleatória randint
de timeit timeit de importação
import sys
sys.setrecursionlimit ( 1000000 )

import matplotlib as mpl
mpl.use ( ' Agg ' )
import matplotlib.pyplot como plt

def  geraLista ( tam , caso ): # 1 - melhor / 2 - medio / 3 - pior
	print ( " Gerando uma lista ... " )
	lista = []
	if (caso ==  " crescente " ):
		para eu na  faixa ( 0 , tam):
			lista.append (i)
	elif (caso ==  " aleatoria " ):
		enquanto  len (lista) < tam:
			n = randint ( 0 , 1 * (tam - 1 ))
			se n não está  na lista: lista.append (n)
	elif (caso ==  " decrescente " ):
		para eu na  faixa (tam - 1 , - 1 , - 1 ):
			lista.append (i)
	return lista

def  countSort ( lista ):
	maior =  max (lista)
	output = [ 0  para i na  faixa (maior + 1 )]
	contagem = [ 0  para i na  faixa (maior + 1 )]
	ans = [ " "  para _ na lista]

	para eu na lista:
		contar [i] + =  1

	para eu na  faixa (maior):
		contar [i] + = contar [i - 1 ]

	para eu no  intervalo ( len (lista)):
		saída [contagem [lista [i]] - 1 ] = lista [i]
		contar [lista [i]] - =  1

	para eu no  intervalo ( len (lista)):
		ans [i] = saída [i]
	retorno ans  

def  geraGraf ( x , lab , y , xl , yl , filew ):
	print ( " Plotando o gráfico 1 ... " )
	núcleos = [ ' azul ' , ' verde ' , ' vermelho ' , ' roxo ' , ' preto ' ]
	fig = plt.figure ( figsize = ( 10 , 10 ))
	ax = fig.add_subplot ( 111 )
	para i no  intervalo ( 0 , len (lab)):
		ax.plot (x, y [i], label = lab [i], markerfacecolor = núcleos [i], markersize = 12 )
	ax.legend ( bbox_to_anchor = ( 1 , 1 ), bbox_transform = plt.gcf (). transFigura)
	plt.ylabel (yl)
	plt.xlabel (xl)
	fig.savefig (filew)

def  geraGraf2 ( x , y , xl , yl , filew ):
	print ( " Plotando o gráfico 2 ... " )
	fig = plt.figure ( figsize = ( 10 , 10 ))
	ax = fig.add_subplot ( 111 )
	ax.plot (x, y, label = " Decrescente " )
	ax.legend ( bbox_to_anchor = ( 1 , 1 ), bbox_transform = plt.gcf (). transFigura)
	plt.ylabel (yl)
	plt.xlabel (xl)
	fig.savefig (filew)

series = [ 1000 , 2000 , 3000 , 4000 , 5000 ]
casos = [ " crescente " , " aleatoria " , " decrescente " ]
tempos = []

para tam em série:
	t = []
	para tipo em casos:
		lista = geraLista (tam, tipo)
		t.append (timeit ( " countSort ( {} ) " .format (lista), setup = " de __main__ import countSort " , número = 1 ))
	tempos.append (t)

imprimir (tempos)
geraGraf (casos, séries, tempos, " Casos " , " Tempo " , " series3casos.png " )

series = [ 2000 , 4000 , 6000 , 8000 , 10000 ]
tempos = []

para tam em série:
	lista = geraLista (tam, " decrescente " )
	tempos.append (timeit ( " countSort ( {} ) " .format (lista), setup = " de __main__ import countSort " , número = 1 ))

imprimir (tempos)
geraGraf2 (séries, andamentos, " Casos " , " Tempo " , " seriesDecrescente.png " )


print ( " Finish " )
